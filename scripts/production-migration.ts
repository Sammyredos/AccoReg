#!/usr/bin/env tsx

/**
 * Production Migration Script
 * Handles database schema updates for production deployment
 * Specifically adds branch field to registration tables
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function runProductionMigration() {
  console.log('üîÑ Starting Production Database Migration...')
  console.log('=' .repeat(50))

  try {
    // Check if we're connected to the database
    await prisma.$connect()
    console.log('‚úÖ Database connection established')

    // Check if branch field already exists in registrations table
    console.log('\nüîç Checking current database schema...')
    
    try {
      // Try to query a registration with branch field
      const testQuery = await prisma.$queryRaw`
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'registrations' 
        AND column_name = 'branch'
      `
      
      if (Array.isArray(testQuery) && testQuery.length > 0) {
        console.log('‚úÖ Branch field already exists in registrations table')
      } else {
        throw new Error('Branch field not found')
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Branch field missing, adding now...')
      
      // Add branch field to registrations table
      await prisma.$executeRaw`
        ALTER TABLE "registrations" 
        ADD COLUMN IF NOT EXISTS "branch" TEXT NOT NULL DEFAULT 'Not Specified'
      `
      console.log('‚úÖ Added branch field to registrations table')
      
      // Add index for performance
      try {
        await prisma.$executeRaw`
          CREATE INDEX IF NOT EXISTS "registrations_branch_idx" 
          ON "registrations"("branch")
        `
        console.log('‚úÖ Added branch index to registrations table')
      } catch (indexError) {
        console.log('‚ö†Ô∏è Branch index may already exist')
      }
    }

    // Check if branch field exists in children_registrations table
    try {
      const testChildrenQuery = await prisma.$queryRaw`
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'children_registrations' 
        AND column_name = 'branch'
      `
      
      if (Array.isArray(testChildrenQuery) && testChildrenQuery.length > 0) {
        console.log('‚úÖ Branch field already exists in children_registrations table')
      } else {
        throw new Error('Branch field not found in children table')
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Branch field missing in children table, adding now...')
      
      // Add branch field to children_registrations table
      await prisma.$executeRaw`
        ALTER TABLE "children_registrations" 
        ADD COLUMN IF NOT EXISTS "branch" TEXT NOT NULL DEFAULT 'Not Specified'
      `
      console.log('‚úÖ Added branch field to children_registrations table')
      
      // Add index for performance
      try {
        await prisma.$executeRaw`
          CREATE INDEX IF NOT EXISTS "children_registrations_branch_idx" 
          ON "children_registrations"("branch")
        `
        console.log('‚úÖ Added branch index to children_registrations table')
      } catch (indexError) {
        console.log('‚ö†Ô∏è Branch index may already exist in children table')
      }
    }

    // Update existing records without branch data
    console.log('\nüîÑ Updating existing records...')
    
    const updatedRegistrations = await prisma.$executeRaw`
      UPDATE "registrations" 
      SET "branch" = 'Not Specified' 
      WHERE "branch" IS NULL OR "branch" = ''
    `
    console.log(`‚úÖ Updated ${updatedRegistrations} registration records`)

    const updatedChildren = await prisma.$executeRaw`
      UPDATE "children_registrations" 
      SET "branch" = 'Not Specified' 
      WHERE "branch" IS NULL OR "branch" = ''
    `
    console.log(`‚úÖ Updated ${updatedChildren} children registration records`)

    // Verify the migration
    console.log('\nüîç Verifying migration...')
    
    const registrationCount = await prisma.registration.count()
    const childrenCount = await prisma.childrenRegistration.count()
    
    console.log(`‚úÖ Total registrations: ${registrationCount}`)
    console.log(`‚úÖ Total children registrations: ${childrenCount}`)

    // Test branch field functionality
    try {
      const sampleRegistration = await prisma.registration.findFirst({
        select: { id: true, fullName: true, branch: true }
      })
      
      if (sampleRegistration) {
        console.log(`‚úÖ Sample registration branch: ${sampleRegistration.branch}`)
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Could not verify sample registration')
    }

    console.log('\nüéâ Production Migration Completed Successfully!')
    console.log('‚úÖ Branch field is now available for both registration forms')
    console.log('‚úÖ Existing records have been updated with default values')
    console.log('‚úÖ Database indexes have been created for performance')

  } catch (error) {
    console.error('‚ùå Migration failed:', error)
    console.error('üîß Manual intervention may be required')
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Run the migration
if (require.main === module) {
  runProductionMigration()
    .then(() => {
      console.log('\n‚úÖ Migration script completed successfully!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Migration script failed:', error)
      process.exit(1)
    })
}

export { runProductionMigration }
